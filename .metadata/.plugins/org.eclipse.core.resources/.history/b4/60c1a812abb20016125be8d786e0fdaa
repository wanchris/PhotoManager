package photo_renamer;

import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class TagTest {
	//Create instances that the entire class can share.
	private Tag tagtestone, tagtesttwo, tagtestthree;
	private String name1, name2, name3; 
	private List<String> tagsActual; 
	private List<String> tagsExpected;	

	
	@Before
	public void SetUp() throws Exception {
		// Set these values in this method so that every test case can
        // begin with them in this state, even if previous test cases
        // have changed them.
		tagsActual = Tag.getTags(); //Create a variable to store the Tag List generated by the subclass
		tagsExpected = new ArrayList<String>(); //Create a variable to store the expected value of tags
		name1 = "One";
		name2 = "Two";
		name3 = "Three"; 
	}
	
	@Test
	public void testEmptyTags() {
		assertEquals(tagsExpected, tagsActual);
	}
	
	@Test
	public void testOneTag() throws ClassNotFoundException, IOException {
		
		tagtestone = new Tag("One", false, false); //Create a new tag named One
		//Add the tag values 
		tagsExpected.add("One");
		
		assertEquals(tagsExpected, tagsActual);		
	
	}
	
	@Test
	public void testMultipleTags() throws ClassNotFoundException, IOException {
		tagtestone = new Tag("One", false, false); //Create a new tag named One
		tagtesttwo = new Tag("Two", false, false); //Create a new tag named Two
		tagtestthree = new Tag("Three", false, false); //Create a new tag named Three
		//Add the tag values 
		tagsExpected.add("One");
		tagsExpected.add("Two"); 
		tagsExpected.add("Three"); 
		
		assertEquals(tagsExpected, tagsActual); 
	}
	
	@Test
	public void testLoadAndSaveOneTag() throws ClassNotFoundException, IOException {
		tagtestone = new Tag("One"); //Create a new tag named One		
		//Add the tag values 
		tagsExpected.add("One");
		
		List<String> tagsLoaded = new ArrayList<String>(); //create a new tag variable to store the loading tags
		
		String currentDirectory = System.getProperty("user.dir");
		String path = currentDirectory + "\\" + Tag.FILENAME;		
		File f = new File(path);

		FileReader fileReader = new FileReader(f);
		BufferedReader bufferedReader = new BufferedReader(fileReader);
		String line = bufferedReader.readLine();
		while (line != null) {
			tagsLoaded.add(line);
			line = bufferedReader.readLine(); 
		}
		fileReader.close();
		
		assertEquals(tagsExpected, tagsLoaded); 
	}
	
	@Test
	public void testLoadAndSaveNoTags() throws ClassNotFoundException, IOException {
		tagtestone = new Tag("One"); //Create a new tag named One
		tagtesttwo = new Tag("Two"); //Create a new tag named Two
		tagtestthree = new Tag("Three"); //Create a new tag named Three
		//Add the tag values 
		tagsExpected.add("One");
		tagsExpected.add("Two"); 
		tagsExpected.add("Three"); 	
		
		List<String> tagsLoaded = new ArrayList<String>(); //create a new tag variable to store the loading tags
		
		String currentDirectory = System.getProperty("user.dir");
		String path = currentDirectory + "\\" + Tag.FILENAME;		
		File f = new File(path);

		FileReader fileReader = new FileReader(f);
		BufferedReader bufferedReader = new BufferedReader(fileReader);
		String line = bufferedReader.readLine();
		while (line != null) {
			tagsLoaded.add(line);
			line = bufferedReader.readLine(); 
		}
		fileReader.close();
		
		assertEquals(tagsExpected, tagsLoaded); 
	}
	
	@Test
	public void testGetName() throws ClassNotFoundException, IOException {
		tagtestone = new Tag("One", false, false); //Create a new tag named One
		tagtesttwo = new Tag("Two", false, false); //Create a new tag named Two
		tagtestthree = new Tag("Three", false, false); //Create a new tag named Three
		assertEquals(name1, tagtestone.getName());
		assertEquals(name2, tagtesttwo.getName());
		assertEquals(name3, tagtestthree.getName());
	}
	
	
	@After
	public void TearDown() throws Exception{
		tagsActual = null; 
		assertNull(tagsActual); 
		tagsExpected = null;
		assertNull(tagsExpected);	
		tagtestone = null; 
		assertNull(tagtestone);
		tagtesttwo = null; 
		assertNull(tagtesttwo);
		tagtestthree = null; 
		assertNull(tagtestthree);
		
		Tag.removeTags(); //Reset the tags	
		
	}
		
	
}


