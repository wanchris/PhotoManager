package photo_renamer;

import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class TagTest {
	//Create instances that the entire class can share.
	private Tag tagtestone, tagtesttwo, tagtestthree, temptag;
	private String name1, name2, name3, change1, change2, change3; 
	private List<String> tagsActual; 
	private List<String> tagsExpected;	
	
	private Method initialize; 
	
	@Before
	public void SetUp() throws NoSuchMethodException, SecurityException, NoSuchFieldException{
		// Set these values in this method so that every test case can
        // begin with them in this state, even if previous test cases
        // have changed them.
		tagsActual = Tag.getTags(); //Create a variable to store the Tag List generated by the subclass
		tagsExpected = new ArrayList<String>(); //Create a variable to store the expected value of tags
		
		name1 = "One";
		name2 = "Two";
		name3 = "Three"; 
		
		change1 = "1"; 
		change2 = "2"; 
		change3 = "3";
		
		//gain access to the initialize method from Tag class 
		initialize = Tag.class.getDeclaredMethod("initialize");
		initialize.setAccessible(true);
	}
	
	@Test
	public void testGetNoTags() {
		//The tagsActual variable stores the result the getTags() method.
		assertEquals(tagsExpected, tagsActual);
	}
	
	@Test
	public void testGetOneTag() throws ClassNotFoundException, IOException {
		//The tagsActual variable stores the result the getTags() method.
		tagtestone = new Tag("One"); //Create a new tag named One
		//Add the tag values 
		tagsExpected.add("One");
		
		assertEquals(tagsExpected, tagsActual);			
	}	
	
	@Test
	public void testGetMultipleTags() throws ClassNotFoundException, IOException {
		//The tagsActual variable stores the result the getTags() method. Test for all true/false.
		tagtestone = new Tag("One"); //Create a new tag named One
		tagtesttwo = new Tag("Two"); //Create a new tag named Two
		tagtestthree = new Tag("Three"); //Create a new tag named Three
		//Add the tag values 
		tagsExpected.add("One");
		tagsExpected.add("Two"); 
		tagsExpected.add("Three"); 
		
		assertEquals(tagsExpected, tagsActual); 
	}
	
	@Test
	public void testLoadAndSaveNoTags() throws ClassNotFoundException, IOException {
		//testing both load and save functions in one test 
		
		String currentDirectory = System.getProperty("user.dir");
		String path = currentDirectory + "\\" + "none.txt";	
		File f = new File(path);
		f.createNewFile(); 
		
		Tag.saveTags(path);
		Tag.removeTags();
		assertTrue(tagsActual.isEmpty()); 
		
		Tag.loadTags(path);
		
		assertEquals(tagsExpected, tagsActual); 
	}
	
	@Test
	public void testLoadAndSaveOneTag() throws ClassNotFoundException, IOException {
		//testing both load and save functions in one test 
		
		String currentDirectory = System.getProperty("user.dir");
		String path = currentDirectory + "\\" + "one.txt";	
		File f = new File(path);
		f.createNewFile(); 
		
		tagtestone = new Tag("One"); //Create a new tag named One		
		
		Tag.saveTags(path);
		//Add the tag values 
		tagsExpected.add("One");
		
		Tag.removeTags();
		assertTrue(tagsActual.isEmpty()); 
		
		Tag.loadTags(path);
		assertEquals(tagsExpected, tagsActual); 
	}
	
	@Test
	public void testLoadAndSaveMultipleTags() throws ClassNotFoundException, IOException {
		//testing both load and save functions in one test 
		
		String currentDirectory = System.getProperty("user.dir");
		String path = currentDirectory + "\\" + "multiple.txt";	
		File f = new File(path);
		f.createNewFile(); 
		
		tagtestone = new Tag("One"); //Create a new tag named One
		tagtesttwo = new Tag("Two"); //Create a new tag named Two
		tagtestthree = new Tag("Three"); //Create a new tag named Three
		
		Tag.saveTags(path);
		//Add the tag values 
		tagsExpected.add("One");
		tagsExpected.add("Two"); 
		tagsExpected.add("Three"); 	
		
		Tag.removeTags();
		assertTrue(tagsActual.isEmpty()); 
		
		Tag.loadTags(path);
		
		assertEquals(tagsExpected, tagsActual); 
	}
	
	@Test
	public void testGetName() throws ClassNotFoundException, IOException { 
		//test for the first constructor 
		tagtestone = new Tag("One"); //Create a new tag named One
		tagtesttwo = new Tag("Two"); //Create a new tag named Two
		tagtestthree = new Tag("Three"); //Create a new tag named Three
		assertEquals(name1, tagtestone.getName());
		assertEquals(name2, tagtesttwo.getName());
		assertEquals(name3, tagtestthree.getName());
	}
	
	@Test
	public void testSetName() throws ClassNotFoundException, IOException { 
		//test for the first constructor 
		tagtestone = new Tag("One"); //Create a new tag named One
		tagtesttwo = new Tag("Two"); //Create a new tag named Two
		tagtestthree = new Tag("Three"); //Create a new tag named Three
		//Change the names of all 3 tags. 
		tagtestone.setName("1");
		tagtesttwo.setName("2");
		tagtestthree.setName("3"); 
		
		assertEquals(change1, tagtestone.getName());
		assertEquals(change2, tagtesttwo.getName());
		assertEquals(change3, tagtestthree.getName());		
	}	

	@Test 
	public void testDoubleTags() throws ClassNotFoundException, IOException { 
		tagtestone = new Tag("One"); //Create a new tag named One
		tagtesttwo = new Tag("One"); //Try to create an additional tag named One 
		//Add the tag values 
		tagsExpected.add("One"); //Tags should only display "One" once 
		
		assertEquals(tagsExpected, tagsActual); 
	}
	
	@Test
	public void testRemoveNoTags() throws ClassNotFoundException, IOException { 
		Tag.removeTags();
		assertTrue(tagsActual.isEmpty()); //Check to make sure the tags list is empty
	}
	
	@Test 
	public void testRemoveOneTag() throws ClassNotFoundException, IOException { 
		//Do not load from the master tag file in case other tests have modified.
		tagtestone = new Tag("One"); //Create a new tag named One		
				
		Tag.removeTags();
		assertTrue(tagsActual.isEmpty()); //Check to make sure the tags list is empty		
	}
	
	@Test 
	public void testRemoveMultipleTags() throws ClassNotFoundException, IOException { 
		//Do not load from the master tag file in case other tests have modified.
		tagtestone = new Tag("One"); //Create a new tag named One
		tagtesttwo = new Tag("Two"); //Create a new tag named Two
		tagtestthree = new Tag("Three"); //Create a new tag named Three		
		
		Tag.removeTags();
		assertTrue(tagsActual.isEmpty()); 
	}
	
	@Test 
	public void testInitializeNoTags() throws ClassNotFoundException, IOException, IllegalAccessException, IllegalArgumentException, InvocationTargetException { 
		//Write a file with the same path as the masterlist that contains no tags.  
		List<String> toWrite = new ArrayList<String>(); 
		
		temptag = new Tag("temp"); //create a temporary instance to use for the pulled method
		Tag.removeTags(); //remove the instance from the list
		assertTrue(Tag.getTags().isEmpty());
		
		//empty the masterlist
		String currentDirectory = System.getProperty("user.dir");
		String path = currentDirectory + "\\" + Tag.FILENAME;
		File f = new File(path); 
		
		PrintWriter writer = new PrintWriter(f); 
	    for (String toAdd: toWrite) {
	    	writer.println(toAdd); 
	    }
	    writer.close();
	    
	    initialize.invoke(temptag); 	    
	    
	    assertEquals(tagsExpected, tagsActual); 	 
	}
	
	@Test 
	public void testInitializeOneTag() throws ClassNotFoundException, IOException, IllegalAccessException, IllegalArgumentException, InvocationTargetException { 
		//Write a file with the same path as the masterlist that contains one tag - One. 
		List<String> toWrite = new ArrayList<String>(); 
		toWrite.add("One");
		
		temptag = new Tag("temp"); //create a temporary instance to use for the pulled method
		Tag.removeTags(); //remove the instance from the list
		assertTrue(Tag.getTags().isEmpty());
		
		//empty the masterlist
		String currentDirectory = System.getProperty("user.dir");
		String path = currentDirectory + "\\" + Tag.FILENAME;
		File f = new File(path); 
		
		PrintWriter writer = new PrintWriter(f); 
	    for (String toAdd: toWrite) {
	    	writer.println(toAdd); 
	    }
	    writer.close();
	    
	    initialize.invoke(temptag); 
	    
	    //Add the tag values 
	    tagsExpected.add("One");
	    
	    assertEquals(tagsExpected, tagsActual); 	    
	}
	
	@Test 
	public void testInitializeMultipleTags() throws ClassNotFoundException, IOException, IllegalAccessException, IllegalArgumentException, InvocationTargetException { 
		//Write a file with the same path as the masterlist that contains three tags - One, Two, Three. 
		List<String> toWrite = new ArrayList<String>(); 
		toWrite.add("One");
		toWrite.add("Two"); 
		toWrite.add("Three"); 
		
		temptag = new Tag("temp"); //create a temporary instance to use for the pulled method
		Tag.removeTags(); //remove the instance from the list
		assertTrue(Tag.getTags().isEmpty());
		
		//empty the masterlist
		String currentDirectory = System.getProperty("user.dir");
		String path = currentDirectory + "\\" + Tag.FILENAME;
		File f = new File(path); 
		
		PrintWriter writer = new PrintWriter(f); 
	    for (String toAdd: toWrite) {
	    	writer.println(toAdd); 
	    }
	    writer.close();
	    
	    initialize.invoke(temptag); 
	    
	    //Add the tag values 
	    tagsExpected.add("One");
	    tagsExpected.add("Two"); 
	    tagsExpected.add("Three"); 	
	    
	    assertEquals(tagsExpected, tagsActual); 	    
	}
	
	@After
	public void TearDown() throws Exception{
		tagsActual = null; 
		assertNull(tagsActual); 
		tagsExpected = null;
		assertNull(tagsExpected);	
		tagtestone = null; 
		assertNull(tagtestone);
		tagtesttwo = null; 
		assertNull(tagtesttwo);
		tagtestthree = null; 
		assertNull(tagtestthree);
		
		Tag.removeTags(); //Reset the tags	
		assertTrue(Tag.getTags().isEmpty()); 
		
		List<String> toWrite = new ArrayList<String>(); 
	
		String currentDirectory = System.getProperty("user.dir");
		String path = currentDirectory + "\\" + Tag.FILENAME;
		File f = new File(path); 
		
		PrintWriter writer = new PrintWriter(f); 
	    for (String toAdd: toWrite) {
	    	writer.println(toAdd); 
	    }
	    writer.close();
	}
		
	
}


