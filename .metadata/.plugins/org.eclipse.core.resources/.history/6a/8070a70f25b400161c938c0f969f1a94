package photo_renamer;

import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.*;

/**
 * Manages all the functions of an image. 
 */
public class imageManager {
	public static void main (String[] args) throws ClassNotFoundException, IOException, InterruptedException{
//		String pathImage = "C:\\Users\\Bryan\\Documents\\University Year Two\\kaneki.jpg";
//		String pathImageChanged = "C:\\Users\\Bryan\\Documents\\University Year Two\\kaneki @a @b.jpg";
//		ArrayList<Tag> tags = new ArrayList<Tag>();
//
//		tags.add(new Tag("a"));
//		tags.add(new Tag("b"));
//
//		imageManager i = new imageManager();
//		i.rename(tags, pathImage);
//		i.revert("kaneki.jpg", pathImageChanged);
//		i.rename(tags, pathImage);
//		i.revert("kaneki.jpg", pathImageChanged);
	}

	final String FILENAME = "nameHistory.txt";
	private static Map<String, ArrayList<String>> nameHistory;
	private String path;
    private static final Logger logger = Logger.getLogger(imageManager.class.getName());
    private final Handler fileHandler = new FileHandler("log.txt",true);
    
	/**
	 * Create an imageManager with a path and pathImage.
	 * @param path the directory path of the text file storing the value of nameHistory.
	 * @param pathImage the directory path to the image being viewed
	 * @throws ClassNotFoundException if readFromFile can't find a class with a specified name from a file.
	 * @throws IOException if readFromFile has problems with file creation, reading or writing.
	 */
	private imageManager() throws IOException, ClassNotFoundException{
		String currentDirectory = System.getProperty("user.dir");
		String path = currentDirectory + "\\" + FILENAME;
		this.path = path;
		this.nameHistory = new HashMap<String, ArrayList<String>>();
		readFromFile(path);
		
		fileHandler.setFormatter(new SimpleFormatter());
		logger.setLevel(Level.ALL);
		fileHandler.setLevel(Level.ALL);
		logger.addHandler(fileHandler);	
	}
	
	public static imageManager getInstance() {
		return imageManagerHolder.INSTANCE;
	}

	private static class ImageManagerHolder {
		private static final imageManager INSTANCE = new imageManager(); 
	}

	/**
	 * Returns the name of the file being observed.
	 * @return the String value of the name of the file.
	 */
	public ArrayList<String> getTagHistory(String pathImage){
		File file = new File(pathImage);
		ArrayList<String> tags = new ArrayList<String>();
		String name = file.getName().substring(file.getName().indexOf("@") + 1, file.getName().lastIndexOf("."));
		
		for (String x: name.split("@")){
			tags.add(x.trim());
		}
		return tags;
	}
	
	public ArrayList<String> getNameHistory(String pathImage){
		File file = new File(pathImage);
		ArrayList<String> tags = new ArrayList<String>();
		String name = file.getName();
		return this.nameHistory.get(name);
	}
	

	/**
	 * Renames the image being observed to include tags with a leading '@' and calls the addRename 
	 * function to update nameHistory with the new name.
	 * @param tags list of tags being added to the image name.
	 * @throws IOException if there is a writing error when adding a rename to an image's name history.
	 */
	public void rename(ArrayList<Tag> tags, String  pathImage) throws IOException{
		File curDir = new File(pathImage);
		
		if (curDir.exists()){
			String exten = pathImage.substring(pathImage.lastIndexOf("."));
			String renamedPath= pathImage.substring(0, pathImage.lastIndexOf("."));

			for(Tag tag: tags){
				renamedPath += " @" + tag.getName();
			}
			renamedPath += exten;

			File  newDir = new File(renamedPath);

			curDir.renameTo(newDir);
			
			addRename(curDir.getName(), newDir.getName());
			
			logger.log(Level.FINE, "Old name: " + curDir.getName()+ " " + "New name: " + newDir.getName());
			
			//this.originalName = getOriginalName();
		}
		else
			System.out.println("This image file does not exist!");
	}

	/**
	 * Reads file from path to update nameHistory with changes made prior to current iteration of program.
	 * @param path the directory path to the file containing past nameHistory values
	 * @throws ClassNotFoundException if no class with specified name can be found from file.
	 * @throws IOException if there is an error creating, writing or reading files. 
	 */
	public void readFromFile(String path)throws ClassNotFoundException, IOException{
		try{
			InputStream file = new FileInputStream(path);
			InputStream buffer = new BufferedInputStream(file);
			ObjectInput input = new ObjectInputStream(buffer);

			//deserialize the Map
			this.nameHistory = (Map<String, ArrayList<String>>) input.readObject();
			input.close();
		}catch(FileNotFoundException e){
			File f = new File(path);
			f.createNewFile();
			writeToFile(path);
			readFromFile(path);
		}
	}

	/**
	 * Writes the value of nameHistory to the text file location at directory path.
	 * @param path the path of the text file to be written in.
	 * @throws IOException if there is an error writing to a file.
	 */
	public void writeToFile(String path) throws IOException{
		OutputStream file = new FileOutputStream(path);
		OutputStream buffer = new BufferedOutputStream(file);
		ObjectOutput output = new ObjectOutputStream(buffer);

		output.writeObject(this.nameHistory);
		output.close();
	}

	/**
	 * Adds the new name of an image to nameHistory, recording its change over time.
	 * @param prevName the name of an image prior to its renaming.
	 * @param newName the new name of an image.
	 * @throws IOException if there is an error in writing the history of a name's changes into the path text file.
	 */
	public void addRename(String prevName, String newName) throws IOException{
		if (nameHistory.containsKey(prevName)){
			nameHistory.put(newName, nameHistory.get(prevName));
			if (!nameHistory.get(newName).contains(newName))
				nameHistory.get(newName).add(newName);
			nameHistory.remove(prevName);
		}
		else {
			ArrayList<String> add = new ArrayList<String>();
			add.add(prevName);
			add.add(newName);

			this.nameHistory.put(newName, add);
		}
		
		writeToFile(this.path);
	}

	/**
	 * Reverts the name of image to one that it previously had.
	 * @param oldName the name of an image it used to have.
	 * @throws IOException if there is a writing error when adding a rename to an image's name history.
	 */
	public void revert(String oldName, String pathImage) throws IOException{
		File curDir = new File(pathImage);
		String curName = curDir.getName();
		if (this.nameHistory.containsKey(curName) && this.nameHistory.get(curName).contains(oldName)){
			
			curDir.renameTo(new File (curDir.getParent() + "\\" + oldName));
			addRename(curName, oldName);
			
			logger.log(Level.FINE, "Old name: " + curDir.getName()+ " " + "New name: " + oldName);
			
		}
		else
			System.out.println("This was not an old name or image was not found!");
	}
	
	public void remove(ArrayList<Tag> tags, String pathImage) throws IOException{
		File curDir = new File(pathImage);
		String curName = curDir.getName();
		String newName = curName;
		for (Tag t: tags){
			newName = newName.replace(" @" + t.getName(), "");
		}
		curDir.renameTo(new File(curDir.getParent() + "\\" + newName));
		addRename(curName, newName);
		logger.log(Level.FINE, "Old name: " + curDir.getName()+ " " + "New name: " + newName);
	}

}
